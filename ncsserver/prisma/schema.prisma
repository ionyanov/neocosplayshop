// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int             @id @default(autoincrement())
  username String?
  password String
  email    String          @unique
  role     Role            @default(USER)
  avarat   String
  settings UsersSettings[]
  Order    Order[]
}

model JsonSetting {
  id    Int             @id @default(autoincrement())
  users UsersSettings[]
}

model UsersSettings {
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  JsonSetting JsonSetting @relation(fields: [settingId], references: [id])
  settingId   Int

  @@id([userId, settingId])
}

model Setting {
  id    Int    @id @default(autoincrement())
  name  String @unique
  value String
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  link     String
  visible  Boolean   @default(true)
  order    Int
  products Product[]
}

model Film {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  persons Person[]
}

model Person {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  film     Film      @relation(fields: [filmId], references: [id])
  filmId   Int       @map("film_id")
  products Product[]
}

model Product {
  id         Int            @id @default(autoincrement())
  name       String
  person     Person         @relation(fields: [personId], references: [id])
  personId   Int            @map("person_id")
  price      Int
  category   Category       @relation(fields: [categoryId], references: [id])
  categoryId Int            @map("category_id")
  tags       ProductTags[]
  popular    Boolean        @default(false)
  onsales    Boolean        @default(false)
  images     ProductImage[]
  mainImage  Int            @map("main_image")
  orderItems OrderItem[]
}

model Tag {
  id       Int           @id @default(autoincrement())
  name     String        @unique
  products ProductTags[]
}

model ProductTags {
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")
  tags      Tag     @relation(fields: [tagId], references: [id])
  tagId     Int     @map("tag_id")

  @@id([productId, tagId])
}

model ProductImage {
  id          Int      @id @default(autoincrement())
  link        String
  description String
  product     Product? @relation(fields: [productId], references: [id])
  productId   Int?     @map("product_id")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  status OrderStatus
  items  OrderItem[]
  user   User        @relation(fields: [userId], references: [id])
  userId Int         @map("user_id")
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  order       Order?   @relation(fields: [orderId], references: [id])
  orderId     Int?     @map("order_id")
  product     Product? @relation(fields: [productId], references: [id])
  productId   Int?     @map("product_id")
  quantity    Int
  price       Int
  description String
}

// ENUMS
enum OrderStatus {
  PENDING
  PAYED
  MANUFACTURE
  SHIPPED
  DELIVERED
}

enum Role {
  USER
  ADMIN
}
