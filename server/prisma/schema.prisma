generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  created   DateTime  @default(now())
  updated   DateTime  @default(now()) @updatedAt
  email     String    @unique
  password  String
  role      Role      @default(USER)
  avatar    String
  lockcount Int       @default(0)
  lockflg   Boolean   @default(false)
  lastlogin DateTime?
  order     Order[]
}

model Setting {
  id    Int    @id @default(autoincrement())
  name  String @unique
  value String
}

model Category {
  id         Int                  @id @default(autoincrement())
  updated    DateTime             @default(now()) @updatedAt
  name       String
  link       String
  visible    Boolean              @default(true)
  order      Int
  products   Product[]
  properties CategoryProperties[]
}

model CategoryProperties {
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int      @map("category_id")
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int      @map("property_id")

  @@id([categoryId, propertyId])
}

model Property {
  id         Int                  @id @default(autoincrement())
  updated    DateTime             @default(now()) @updatedAt
  name       String
  isList     Boolean              @default(false) @map("is_list")
  order      Int                  @default(0)
  categories CategoryProperties[]
  values     PropertyValues[]
  propucts   ProductProperties[]
}

model PropertyValues {
  id         Int                 @id @default(autoincrement())
  updated    DateTime            @default(now()) @updatedAt
  value      String
  isActive   Boolean             @default(true) @map("is_active")
  propertyId Int                 @map("property_id")
  property   Property            @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propucts   ProductProperties[]
}

model Product {
  id           Int                  @id @default(autoincrement())
  updated      DateTime             @default(now()) @updatedAt
  name         String
  price        Int
  isPopular    Boolean              @default(false) @map("is_popular")
  isOnsales    Boolean              @default(false) @map("is_onsales")
  mainImageId  Int?                 @unique @map("main_image_id")
  mainImage    ProductImage?        @relation("MainImage", fields: [mainImageId], references: [id])
  categoryId   Int                  @map("category_id")
  category     Category             @relation(fields: [categoryId], references: [id])
  images       ProductImage[]       @relation("Products")
  tags         ProductTags[]
  descriptions ProductDescription[]
  properties   ProductProperties[]
  orderItems   OrderItem[]
}

model Tag {
  id       Int           @id @default(autoincrement())
  updated  DateTime      @default(now()) @updatedAt
  name     String        @unique
  products ProductTags[]
}

model ProductTags {
  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
  tagId     Int     @map("tag_id")
  tags      Tag     @relation(fields: [tagId], references: [id])

  @@id([productId, tagId])
}

model ProductImage {
  id          Int      @id @default(autoincrement())
  link        String
  description String
  productId   Int      @map("product_id")
  products    Product  @relation("Products", fields: [productId], references: [id])
  product     Product? @relation("MainImage")
}

model ProductDescription {
  id          Int      @id @default(autoincrement())
  description String
  type        String
  productId   Int?     @map("product_id")
  product     Product? @relation(fields: [productId], references: [id])
}

model ProductProperties {
  id             Int             @id @default(autoincrement())
  propertyId     Int             @map("property_id")
  property       Property        @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  productId      Int             @map("product_id")
  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  value          String?
  valueId        Int?
  propertyValues PropertyValues? @relation(fields: [valueId], references: [id])
}

model Order {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @default(now()) @map("updated_at")
  status    OrderStatus
  userId    Int         @map("user_id")
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  orderId     Int     @map("order_id")
  order       Order   @relation(fields: [orderId], references: [id])
  productId   Int     @map("product_id")
  product     Product @relation(fields: [productId], references: [id])
  quantity    Int
  price       Int
  description String
}

enum OrderStatus {
  PENDING
  PAYED
  MANUFACTURE
  SHIPPED
  DELIVERED
}

enum Role {
  USER
  ADMIN
}
